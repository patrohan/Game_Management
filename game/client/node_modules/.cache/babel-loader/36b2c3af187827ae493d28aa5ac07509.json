{"ast":null,"code":"let queue = []; // After 6 seconds, an elo with a difference of 100 will match.\n\nlet defaultTimeWeight = 0.15;\nlet defaultEloDistance = 1000;\nlet defaultRefreshRate = 1000;\n\nlet notify = match => {};\n\nlet matchInterval;\n/*\r\nSets the notify parameter for the player match.\r\n    @notify - Any function to be called with parameter to pass through the match\r\nNo return.\r\n */\n\nfunction setNotify(newNotify) {\n  notify = newNotify;\n}\n/*\r\nSets the elo distance to be matched.\r\n    @defaultEloDistance - Any number\r\nNo return.\r\n */\n\n\nfunction setRequiredEloDistance(newDefaultEloDistance) {\n  defaultEloDistance = newDefaultEloDistance;\n}\n/*\r\nSets the default time weight to be matched.\r\n    @defaultTimeWeight - Any number\r\nNo return.\r\n */\n\n\nfunction setRequiredDefaultTimeWeight(newDefaultTimeWeight) {\n  defaultTimeWeight = newDefaultTimeWeight;\n}\n/*\r\nSets the default refresh weight to be matched.\r\n    @defaultTimeWeight - Any number\r\nNo return.\r\n */\n\n\nfunction setDefaultRefreshRate(newDefaultRefreshRate) {\n  clearInterval(matchInterval);\n  defaultRefreshRate = newDefaultRefreshRate;\n  matchInterval = setInterval(matchPlayers, defaultRefreshRate);\n}\n/*\r\nClears the match making queue.\r\nNo return.\r\n */\n\n\nfunction clearMatchMaking() {\n  queue = [];\n}\n/*\r\nStops the interval and matchmaking process. Saves all the data.\r\nNo return\r\n */\n\n\nfunction stopMatchMaking() {\n  clearInterval(matchInterval);\n}\n/*\r\nStops the interval and matchmaking process and clears the match making queue.\r\n */\n\n\nfunction stopAndClearMatchMaking() {\n  stopMatchMaking();\n  clearMatchMaking();\n}\n/*\r\nStarts the interval and matchmaking process.\r\n */\n\n\nfunction startMatchMaking() {\n  matchInterval = setInterval(matchPlayers, defaultRefreshRate);\n}\n/*\r\nComputes the elo distance between two objects based off their timestamp and elo. Priority is given to the user with\r\nthe longer wait time.\r\n    @user - Requires an object with properties \"elo\" which is a number and \"timestamp\" which is a number.\r\n    @target - Requires an object with properties \"elo\" which is a number and \"timestamp\" which is a number.\r\n    @timeWeight - Is default to defaultTimeWeight(0.15) but acts as a percentage. This is optional.\r\nReturns the computed eloDistance which is a number.\r\n */\n\n\nfunction getEloDistance(user, target) {\n  const timeStamp = Date.now();\n  const userWait = timeStamp - user.timestamp;\n  const targetWait = timeStamp - target.timestamp;\n  return Math.abs(user.player.elo - target.player.elo) + Math.max(userWait, targetWait) * defaultTimeWeight;\n}\n/*\r\nAdds player to the queue.\r\n    @player - Requires an object with property \"elo\" which is a number.\r\nReturns nothing.\r\n */\n\n\nfunction addPlayer(player) {\n  queue.push({\n    player,\n    timestamp: Date.now()\n  });\n}\n/*\r\nMatches players in an O(n^2) solution. Optimize later.\r\nCalls notify.\r\nReturns nothing.\r\n */\n\n\nfunction matchPlayers() {\n  if (queue.length < 2) return;\n  let matched = {};\n\n  for (let i = 0; i < queue.length; ++i) {\n    for (let j = 0; j < queue.length; ++j) {\n      if (i !== j) {\n        const eloDistance = getEloDistance(queue[i], queue[j]);\n\n        if (eloDistance >= defaultEloDistance && !matched.hasOwnProperty(i) && !matched.hasOwnProperty(j)) {\n          matched[i] = {\n            index: i,\n            notified: false,\n            matchedWithIndex: j\n          };\n          matched[j] = {\n            index: j,\n            notified: false,\n            matchedWithIndex: i\n          };\n          break;\n        }\n      }\n    }\n  }\n\n  for (let player in matched) {\n    if (matched[player].hasOwnProperty(\"notified\") && matched[player].hasOwnProperty(\"index\") && matched[player].hasOwnProperty(\"matchedWithIndex\") && !matched[player].notified) {\n      matched[player].notified = true;\n      matched[matched[player].matchedWithIndex].notified = true;\n      notify([queue[matched[player].index].player, queue[matched[player].matchedWithIndex].player]);\n    }\n  }\n\n  queue = queue.filter((value, index) => {\n    return !matched.hasOwnProperty(index);\n  });\n}\n\nmodule.exports = {\n  addPlayer,\n  setNotify,\n  setRequiredEloDistance,\n  setRequiredDefaultTimeWeight,\n  setDefaultRefreshRate,\n  clearMatchMaking,\n  stopMatchMaking,\n  startMatchMaking,\n  stopAndClearMatchMaking\n};","map":{"version":3,"sources":["/Users/pat/Documents/Web_development/game/client/node_modules/simple-matchmaker/elomatch.js"],"names":["queue","defaultTimeWeight","defaultEloDistance","defaultRefreshRate","notify","match","matchInterval","setNotify","newNotify","setRequiredEloDistance","newDefaultEloDistance","setRequiredDefaultTimeWeight","newDefaultTimeWeight","setDefaultRefreshRate","newDefaultRefreshRate","clearInterval","setInterval","matchPlayers","clearMatchMaking","stopMatchMaking","stopAndClearMatchMaking","startMatchMaking","getEloDistance","user","target","timeStamp","Date","now","userWait","timestamp","targetWait","Math","abs","player","elo","max","addPlayer","push","length","matched","i","j","eloDistance","hasOwnProperty","index","notified","matchedWithIndex","filter","value","module","exports"],"mappings":"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","sourcesContent":["let queue = [];\r\n// After 6 seconds, an elo with a difference of 100 will match.\r\nlet defaultTimeWeight = 0.15;\r\nlet defaultEloDistance = 1000;\r\nlet defaultRefreshRate = 1000;\r\n\r\nlet notify = (match) => {};\r\n\r\nlet matchInterval;\r\n\r\n/*\r\nSets the notify parameter for the player match.\r\n    @notify - Any function to be called with parameter to pass through the match\r\nNo return.\r\n */\r\nfunction setNotify(newNotify){\r\n    notify = newNotify;\r\n}\r\n\r\n/*\r\nSets the elo distance to be matched.\r\n    @defaultEloDistance - Any number\r\nNo return.\r\n */\r\nfunction setRequiredEloDistance(newDefaultEloDistance){\r\n    defaultEloDistance = newDefaultEloDistance;\r\n}\r\n\r\n/*\r\nSets the default time weight to be matched.\r\n    @defaultTimeWeight - Any number\r\nNo return.\r\n */\r\nfunction setRequiredDefaultTimeWeight(newDefaultTimeWeight){\r\n    defaultTimeWeight = newDefaultTimeWeight;\r\n}\r\n\r\n/*\r\nSets the default refresh weight to be matched.\r\n    @defaultTimeWeight - Any number\r\nNo return.\r\n */\r\nfunction setDefaultRefreshRate(newDefaultRefreshRate){\r\n    clearInterval(matchInterval);\r\n    defaultRefreshRate = newDefaultRefreshRate;\r\n    matchInterval = setInterval(matchPlayers, defaultRefreshRate);\r\n}\r\n\r\n/*\r\nClears the match making queue.\r\nNo return.\r\n */\r\nfunction clearMatchMaking(){\r\n    queue = [];\r\n}\r\n\r\n/*\r\nStops the interval and matchmaking process. Saves all the data.\r\nNo return\r\n */\r\nfunction stopMatchMaking(){\r\n    clearInterval(matchInterval);\r\n}\r\n\r\n/*\r\nStops the interval and matchmaking process and clears the match making queue.\r\n */\r\nfunction stopAndClearMatchMaking(){\r\n    stopMatchMaking();\r\n    clearMatchMaking();\r\n}\r\n\r\n/*\r\nStarts the interval and matchmaking process.\r\n */\r\nfunction startMatchMaking(){\r\n    matchInterval = setInterval(matchPlayers, defaultRefreshRate);\r\n}\r\n\r\n/*\r\nComputes the elo distance between two objects based off their timestamp and elo. Priority is given to the user with\r\nthe longer wait time.\r\n    @user - Requires an object with properties \"elo\" which is a number and \"timestamp\" which is a number.\r\n    @target - Requires an object with properties \"elo\" which is a number and \"timestamp\" which is a number.\r\n    @timeWeight - Is default to defaultTimeWeight(0.15) but acts as a percentage. This is optional.\r\nReturns the computed eloDistance which is a number.\r\n */\r\nfunction getEloDistance(user, target){\r\n    const timeStamp = Date.now();\r\n    const userWait = timeStamp - user.timestamp;\r\n    const targetWait = timeStamp - target.timestamp;\r\n    return Math.abs(user.player.elo - target.player.elo) + Math.max(userWait,targetWait) * defaultTimeWeight;\r\n}\r\n\r\n/*\r\nAdds player to the queue.\r\n    @player - Requires an object with property \"elo\" which is a number.\r\nReturns nothing.\r\n */\r\nfunction addPlayer(player){\r\n    queue.push({\r\n        player,\r\n        timestamp: Date.now(),\r\n    });\r\n}\r\n\r\n/*\r\nMatches players in an O(n^2) solution. Optimize later.\r\nCalls notify.\r\nReturns nothing.\r\n */\r\nfunction matchPlayers() {\r\n    if(queue.length < 2) return;\r\n    let matched = {};\r\n    for(let i = 0; i<queue.length; ++i){\r\n        for(let j = 0; j<queue.length; ++j){\r\n            if(i !== j){\r\n                const eloDistance = getEloDistance(queue[i], queue[j]);\r\n                if(eloDistance >= defaultEloDistance && !matched.hasOwnProperty(i) && !matched.hasOwnProperty(j)){\r\n                    matched[i] = {\r\n                        index: i,\r\n                        notified: false,\r\n                        matchedWithIndex: j,\r\n                    };\r\n                    matched[j] = {\r\n                        index: j,\r\n                        notified: false,\r\n                        matchedWithIndex: i,\r\n                    };\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n    }\r\n    for(let player in matched){\r\n        if(matched[player].hasOwnProperty(\"notified\") &&\r\n            matched[player].hasOwnProperty(\"index\") &&\r\n            matched[player].hasOwnProperty(\"matchedWithIndex\") &&\r\n            !matched[player].notified){\r\n            matched[player].notified = true;\r\n            matched[matched[player].matchedWithIndex].notified = true;\r\n            notify([queue[matched[player].index].player, queue[matched[player].matchedWithIndex].player]);\r\n        }\r\n    }\r\n\r\n    queue = queue.filter((value, index) => {\r\n       return !matched.hasOwnProperty(index);\r\n    });\r\n\r\n}\r\n\r\nmodule.exports = {\r\n    addPlayer,\r\n    setNotify,\r\n    setRequiredEloDistance,\r\n    setRequiredDefaultTimeWeight,\r\n    setDefaultRefreshRate,\r\n    clearMatchMaking,\r\n    stopMatchMaking,\r\n    startMatchMaking,\r\n    stopAndClearMatchMaking,\r\n};"]},"metadata":{},"sourceType":"script"}