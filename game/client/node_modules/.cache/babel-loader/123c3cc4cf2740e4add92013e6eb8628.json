{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Polling = void 0;\n\nconst transport_1 = require(\"../transport\");\n\nconst zlib_1 = require(\"zlib\");\n\nconst accepts = require(\"accepts\");\n\nconst debug_1 = require(\"debug\");\n\nconst debug = (0, debug_1.default)(\"engine:polling\");\nconst compressionMethods = {\n  gzip: zlib_1.createGzip,\n  deflate: zlib_1.createDeflate\n};\n\nclass Polling extends transport_1.Transport {\n  /**\n   * HTTP polling constructor.\n   *\n   * @api public.\n   */\n  constructor(req) {\n    super(req);\n    this.closeTimeout = 30 * 1000;\n  }\n  /**\n   * Transport name\n   *\n   * @api public\n   */\n\n\n  get name() {\n    return \"polling\";\n  }\n\n  get supportsFraming() {\n    return false;\n  }\n  /**\n   * Overrides onRequest.\n   *\n   * @param req\n   *\n   * @api private\n   */\n\n\n  onRequest(req) {\n    const res = req.res;\n\n    if (req.getMethod() === \"get\") {\n      this.onPollRequest(req, res);\n    } else if (req.getMethod() === \"post\") {\n      this.onDataRequest(req, res);\n    } else {\n      res.writeStatus(\"500 Internal Server Error\");\n      res.end();\n    }\n  }\n  /**\n   * The client sends a request awaiting for us to send data.\n   *\n   * @api private\n   */\n\n\n  onPollRequest(req, res) {\n    if (this.req) {\n      debug(\"request overlap\"); // assert: this.res, '.req and .res should be (un)set together'\n\n      this.onError(\"overlap from client\");\n      res.writeStatus(\"500 Internal Server Error\");\n      res.end();\n      return;\n    }\n\n    debug(\"setting request\");\n    this.req = req;\n    this.res = res;\n\n    const onClose = () => {\n      this.writable = false;\n      this.onError(\"poll connection closed prematurely\");\n    };\n\n    const cleanup = () => {\n      this.req = this.res = null;\n    };\n\n    req.cleanup = cleanup;\n    res.onAborted(onClose);\n    this.writable = true;\n    this.emit(\"drain\"); // if we're still writable but had a pending close, trigger an empty send\n\n    if (this.writable && this.shouldClose) {\n      debug(\"triggering empty send to append close packet\");\n      this.send([{\n        type: \"noop\"\n      }]);\n    }\n  }\n  /**\n   * The client sends a request with data.\n   *\n   * @api private\n   */\n\n\n  onDataRequest(req, res) {\n    if (this.dataReq) {\n      // assert: this.dataRes, '.dataReq and .dataRes should be (un)set together'\n      this.onError(\"data request overlap from client\");\n      res.writeStatus(\"500 Internal Server Error\");\n      res.end();\n      return;\n    }\n\n    const isBinary = \"application/octet-stream\" === req.headers[\"content-type\"];\n\n    if (isBinary && this.protocol === 4) {\n      return this.onError(\"invalid content\");\n    }\n\n    this.dataReq = req;\n    this.dataRes = res;\n    let chunks = [];\n    let contentLength = 0;\n\n    const cleanup = () => {\n      this.dataReq = this.dataRes = chunks = null;\n    };\n\n    const onClose = () => {\n      cleanup();\n      this.onError(\"data request connection closed prematurely\");\n    };\n\n    const headers = {\n      // text/html is required instead of text/plain to avoid an\n      // unwanted download dialog on certain user-agents (GH-43)\n      \"Content-Type\": \"text/html\"\n    };\n    this.headers(req, headers);\n    Object.keys(headers).forEach(key => {\n      res.writeHeader(key, String(headers[key]));\n    });\n\n    const onEnd = () => {\n      this.onData(Buffer.concat(chunks).toString());\n\n      if (this.readyState !== \"closing\") {\n        res.end(\"ok\");\n      }\n\n      cleanup();\n    };\n\n    res.onAborted(onClose);\n    res.onData((chunk, isLast) => {\n      chunks.push(Buffer.from(chunk));\n      contentLength += Buffer.byteLength(chunk);\n\n      if (contentLength > this.maxHttpBufferSize) {\n        this.onError(\"payload too large\");\n        res.writeStatus(\"413 Payload Too Large\");\n        res.end();\n        return;\n      }\n\n      if (isLast) {\n        onEnd();\n      }\n    });\n  }\n  /**\n   * Processes the incoming data payload.\n   *\n   * @param {String} encoded payload\n   * @api private\n   */\n\n\n  onData(data) {\n    debug('received \"%s\"', data);\n\n    const callback = packet => {\n      if (\"close\" === packet.type) {\n        debug(\"got xhr close packet\");\n        this.onClose();\n        return false;\n      }\n\n      this.onPacket(packet);\n    };\n\n    if (this.protocol === 3) {\n      this.parser.decodePayload(data, callback);\n    } else {\n      this.parser.decodePayload(data).forEach(callback);\n    }\n  }\n  /**\n   * Overrides onClose.\n   *\n   * @api private\n   */\n\n\n  onClose() {\n    if (this.writable) {\n      // close pending poll request\n      this.send([{\n        type: \"noop\"\n      }]);\n    }\n\n    super.onClose();\n  }\n  /**\n   * Writes a packet payload.\n   *\n   * @param {Object} packet\n   * @api private\n   */\n\n\n  send(packets) {\n    this.writable = false;\n\n    if (this.shouldClose) {\n      debug(\"appending close packet to payload\");\n      packets.push({\n        type: \"close\"\n      });\n      this.shouldClose();\n      this.shouldClose = null;\n    }\n\n    const doWrite = data => {\n      const compress = packets.some(packet => {\n        return packet.options && packet.options.compress;\n      });\n      this.write(data, {\n        compress\n      });\n    };\n\n    if (this.protocol === 3) {\n      this.parser.encodePayload(packets, this.supportsBinary, doWrite);\n    } else {\n      this.parser.encodePayload(packets, doWrite);\n    }\n  }\n  /**\n   * Writes data as response to poll request.\n   *\n   * @param {String} data\n   * @param {Object} options\n   * @api private\n   */\n\n\n  write(data, options) {\n    debug('writing \"%s\"', data);\n    this.doWrite(data, options, () => {\n      this.req.cleanup();\n    });\n  }\n  /**\n   * Performs the write.\n   *\n   * @api private\n   */\n\n\n  doWrite(data, options, callback) {\n    // explicit UTF-8 is required for pages not served under utf\n    const isString = typeof data === \"string\";\n    const contentType = isString ? \"text/plain; charset=UTF-8\" : \"application/octet-stream\";\n    const headers = {\n      \"Content-Type\": contentType\n    };\n\n    const respond = data => {\n      this.headers(this.req, headers);\n      Object.keys(headers).forEach(key => {\n        this.res.writeHeader(key, String(headers[key]));\n      });\n      this.res.end(data);\n      callback();\n    };\n\n    if (!this.httpCompression || !options.compress) {\n      respond(data);\n      return;\n    }\n\n    const len = isString ? Buffer.byteLength(data) : data.length;\n\n    if (len < this.httpCompression.threshold) {\n      respond(data);\n      return;\n    }\n\n    const encoding = accepts(this.req).encodings([\"gzip\", \"deflate\"]);\n\n    if (!encoding) {\n      respond(data);\n      return;\n    }\n\n    this.compress(data, encoding, (err, data) => {\n      if (err) {\n        this.res.writeStatus(\"500 Internal Server Error\");\n        this.res.end();\n        callback(err);\n        return;\n      }\n\n      headers[\"Content-Encoding\"] = encoding;\n      respond(data);\n    });\n  }\n  /**\n   * Compresses data.\n   *\n   * @api private\n   */\n\n\n  compress(data, encoding, callback) {\n    debug(\"compressing\");\n    const buffers = [];\n    let nread = 0;\n    compressionMethods[encoding](this.httpCompression).on(\"error\", callback).on(\"data\", function (chunk) {\n      buffers.push(chunk);\n      nread += chunk.length;\n    }).on(\"end\", function () {\n      callback(null, Buffer.concat(buffers, nread));\n    }).end(data);\n  }\n  /**\n   * Closes the transport.\n   *\n   * @api private\n   */\n\n\n  doClose(fn) {\n    debug(\"closing\");\n    let closeTimeoutTimer;\n\n    const onClose = () => {\n      clearTimeout(closeTimeoutTimer);\n      fn();\n      this.onClose();\n    };\n\n    if (this.writable) {\n      debug(\"transport writable - closing right away\");\n      this.send([{\n        type: \"close\"\n      }]);\n      onClose();\n    } else if (this.discarded) {\n      debug(\"transport discarded - closing right away\");\n      onClose();\n    } else {\n      debug(\"transport not writable - buffering orderly close\");\n      this.shouldClose = onClose;\n      closeTimeoutTimer = setTimeout(onClose, this.closeTimeout);\n    }\n  }\n  /**\n   * Returns headers for a response.\n   *\n   * @param req - request\n   * @param {Object} extra headers\n   * @api private\n   */\n\n\n  headers(req, headers) {\n    headers = headers || {}; // prevent XSS warnings on IE\n    // https://github.com/LearnBoost/socket.io/pull/1333\n\n    const ua = req.headers[\"user-agent\"];\n\n    if (ua && (~ua.indexOf(\";MSIE\") || ~ua.indexOf(\"Trident/\"))) {\n      headers[\"X-XSS-Protection\"] = \"0\";\n    }\n\n    this.emit(\"headers\", headers, req);\n    return headers;\n  }\n\n}\n\nexports.Polling = Polling;","map":{"version":3,"sources":["/Users/pat/Documents/Web_development/game/node_modules/engine.io/build/transports-uws/polling.js"],"names":["Object","defineProperty","exports","value","Polling","transport_1","require","zlib_1","accepts","debug_1","debug","default","compressionMethods","gzip","createGzip","deflate","createDeflate","Transport","constructor","req","closeTimeout","name","supportsFraming","onRequest","res","getMethod","onPollRequest","onDataRequest","writeStatus","end","onError","onClose","writable","cleanup","onAborted","emit","shouldClose","send","type","dataReq","isBinary","headers","protocol","dataRes","chunks","contentLength","keys","forEach","key","writeHeader","String","onEnd","onData","Buffer","concat","toString","readyState","chunk","isLast","push","from","byteLength","maxHttpBufferSize","data","callback","packet","onPacket","parser","decodePayload","packets","doWrite","compress","some","options","write","encodePayload","supportsBinary","isString","contentType","respond","httpCompression","len","length","threshold","encoding","encodings","err","buffers","nread","on","doClose","fn","closeTimeoutTimer","clearTimeout","discarded","setTimeout","ua","indexOf"],"mappings":"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","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Polling = void 0;\nconst transport_1 = require(\"../transport\");\nconst zlib_1 = require(\"zlib\");\nconst accepts = require(\"accepts\");\nconst debug_1 = require(\"debug\");\nconst debug = (0, debug_1.default)(\"engine:polling\");\nconst compressionMethods = {\n    gzip: zlib_1.createGzip,\n    deflate: zlib_1.createDeflate\n};\nclass Polling extends transport_1.Transport {\n    /**\n     * HTTP polling constructor.\n     *\n     * @api public.\n     */\n    constructor(req) {\n        super(req);\n        this.closeTimeout = 30 * 1000;\n    }\n    /**\n     * Transport name\n     *\n     * @api public\n     */\n    get name() {\n        return \"polling\";\n    }\n    get supportsFraming() {\n        return false;\n    }\n    /**\n     * Overrides onRequest.\n     *\n     * @param req\n     *\n     * @api private\n     */\n    onRequest(req) {\n        const res = req.res;\n        if (req.getMethod() === \"get\") {\n            this.onPollRequest(req, res);\n        }\n        else if (req.getMethod() === \"post\") {\n            this.onDataRequest(req, res);\n        }\n        else {\n            res.writeStatus(\"500 Internal Server Error\");\n            res.end();\n        }\n    }\n    /**\n     * The client sends a request awaiting for us to send data.\n     *\n     * @api private\n     */\n    onPollRequest(req, res) {\n        if (this.req) {\n            debug(\"request overlap\");\n            // assert: this.res, '.req and .res should be (un)set together'\n            this.onError(\"overlap from client\");\n            res.writeStatus(\"500 Internal Server Error\");\n            res.end();\n            return;\n        }\n        debug(\"setting request\");\n        this.req = req;\n        this.res = res;\n        const onClose = () => {\n            this.writable = false;\n            this.onError(\"poll connection closed prematurely\");\n        };\n        const cleanup = () => {\n            this.req = this.res = null;\n        };\n        req.cleanup = cleanup;\n        res.onAborted(onClose);\n        this.writable = true;\n        this.emit(\"drain\");\n        // if we're still writable but had a pending close, trigger an empty send\n        if (this.writable && this.shouldClose) {\n            debug(\"triggering empty send to append close packet\");\n            this.send([{ type: \"noop\" }]);\n        }\n    }\n    /**\n     * The client sends a request with data.\n     *\n     * @api private\n     */\n    onDataRequest(req, res) {\n        if (this.dataReq) {\n            // assert: this.dataRes, '.dataReq and .dataRes should be (un)set together'\n            this.onError(\"data request overlap from client\");\n            res.writeStatus(\"500 Internal Server Error\");\n            res.end();\n            return;\n        }\n        const isBinary = \"application/octet-stream\" === req.headers[\"content-type\"];\n        if (isBinary && this.protocol === 4) {\n            return this.onError(\"invalid content\");\n        }\n        this.dataReq = req;\n        this.dataRes = res;\n        let chunks = [];\n        let contentLength = 0;\n        const cleanup = () => {\n            this.dataReq = this.dataRes = chunks = null;\n        };\n        const onClose = () => {\n            cleanup();\n            this.onError(\"data request connection closed prematurely\");\n        };\n        const headers = {\n            // text/html is required instead of text/plain to avoid an\n            // unwanted download dialog on certain user-agents (GH-43)\n            \"Content-Type\": \"text/html\"\n        };\n        this.headers(req, headers);\n        Object.keys(headers).forEach(key => {\n            res.writeHeader(key, String(headers[key]));\n        });\n        const onEnd = () => {\n            this.onData(Buffer.concat(chunks).toString());\n            if (this.readyState !== \"closing\") {\n                res.end(\"ok\");\n            }\n            cleanup();\n        };\n        res.onAborted(onClose);\n        res.onData((chunk, isLast) => {\n            chunks.push(Buffer.from(chunk));\n            contentLength += Buffer.byteLength(chunk);\n            if (contentLength > this.maxHttpBufferSize) {\n                this.onError(\"payload too large\");\n                res.writeStatus(\"413 Payload Too Large\");\n                res.end();\n                return;\n            }\n            if (isLast) {\n                onEnd();\n            }\n        });\n    }\n    /**\n     * Processes the incoming data payload.\n     *\n     * @param {String} encoded payload\n     * @api private\n     */\n    onData(data) {\n        debug('received \"%s\"', data);\n        const callback = packet => {\n            if (\"close\" === packet.type) {\n                debug(\"got xhr close packet\");\n                this.onClose();\n                return false;\n            }\n            this.onPacket(packet);\n        };\n        if (this.protocol === 3) {\n            this.parser.decodePayload(data, callback);\n        }\n        else {\n            this.parser.decodePayload(data).forEach(callback);\n        }\n    }\n    /**\n     * Overrides onClose.\n     *\n     * @api private\n     */\n    onClose() {\n        if (this.writable) {\n            // close pending poll request\n            this.send([{ type: \"noop\" }]);\n        }\n        super.onClose();\n    }\n    /**\n     * Writes a packet payload.\n     *\n     * @param {Object} packet\n     * @api private\n     */\n    send(packets) {\n        this.writable = false;\n        if (this.shouldClose) {\n            debug(\"appending close packet to payload\");\n            packets.push({ type: \"close\" });\n            this.shouldClose();\n            this.shouldClose = null;\n        }\n        const doWrite = data => {\n            const compress = packets.some(packet => {\n                return packet.options && packet.options.compress;\n            });\n            this.write(data, { compress });\n        };\n        if (this.protocol === 3) {\n            this.parser.encodePayload(packets, this.supportsBinary, doWrite);\n        }\n        else {\n            this.parser.encodePayload(packets, doWrite);\n        }\n    }\n    /**\n     * Writes data as response to poll request.\n     *\n     * @param {String} data\n     * @param {Object} options\n     * @api private\n     */\n    write(data, options) {\n        debug('writing \"%s\"', data);\n        this.doWrite(data, options, () => {\n            this.req.cleanup();\n        });\n    }\n    /**\n     * Performs the write.\n     *\n     * @api private\n     */\n    doWrite(data, options, callback) {\n        // explicit UTF-8 is required for pages not served under utf\n        const isString = typeof data === \"string\";\n        const contentType = isString\n            ? \"text/plain; charset=UTF-8\"\n            : \"application/octet-stream\";\n        const headers = {\n            \"Content-Type\": contentType\n        };\n        const respond = data => {\n            this.headers(this.req, headers);\n            Object.keys(headers).forEach(key => {\n                this.res.writeHeader(key, String(headers[key]));\n            });\n            this.res.end(data);\n            callback();\n        };\n        if (!this.httpCompression || !options.compress) {\n            respond(data);\n            return;\n        }\n        const len = isString ? Buffer.byteLength(data) : data.length;\n        if (len < this.httpCompression.threshold) {\n            respond(data);\n            return;\n        }\n        const encoding = accepts(this.req).encodings([\"gzip\", \"deflate\"]);\n        if (!encoding) {\n            respond(data);\n            return;\n        }\n        this.compress(data, encoding, (err, data) => {\n            if (err) {\n                this.res.writeStatus(\"500 Internal Server Error\");\n                this.res.end();\n                callback(err);\n                return;\n            }\n            headers[\"Content-Encoding\"] = encoding;\n            respond(data);\n        });\n    }\n    /**\n     * Compresses data.\n     *\n     * @api private\n     */\n    compress(data, encoding, callback) {\n        debug(\"compressing\");\n        const buffers = [];\n        let nread = 0;\n        compressionMethods[encoding](this.httpCompression)\n            .on(\"error\", callback)\n            .on(\"data\", function (chunk) {\n            buffers.push(chunk);\n            nread += chunk.length;\n        })\n            .on(\"end\", function () {\n            callback(null, Buffer.concat(buffers, nread));\n        })\n            .end(data);\n    }\n    /**\n     * Closes the transport.\n     *\n     * @api private\n     */\n    doClose(fn) {\n        debug(\"closing\");\n        let closeTimeoutTimer;\n        const onClose = () => {\n            clearTimeout(closeTimeoutTimer);\n            fn();\n            this.onClose();\n        };\n        if (this.writable) {\n            debug(\"transport writable - closing right away\");\n            this.send([{ type: \"close\" }]);\n            onClose();\n        }\n        else if (this.discarded) {\n            debug(\"transport discarded - closing right away\");\n            onClose();\n        }\n        else {\n            debug(\"transport not writable - buffering orderly close\");\n            this.shouldClose = onClose;\n            closeTimeoutTimer = setTimeout(onClose, this.closeTimeout);\n        }\n    }\n    /**\n     * Returns headers for a response.\n     *\n     * @param req - request\n     * @param {Object} extra headers\n     * @api private\n     */\n    headers(req, headers) {\n        headers = headers || {};\n        // prevent XSS warnings on IE\n        // https://github.com/LearnBoost/socket.io/pull/1333\n        const ua = req.headers[\"user-agent\"];\n        if (ua && (~ua.indexOf(\";MSIE\") || ~ua.indexOf(\"Trident/\"))) {\n            headers[\"X-XSS-Protection\"] = \"0\";\n        }\n        this.emit(\"headers\", headers, req);\n        return headers;\n    }\n}\nexports.Polling = Polling;\n"]},"metadata":{},"sourceType":"script"}